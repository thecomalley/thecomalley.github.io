"use strict";(self.webpackChunkmy_blog=self.webpackChunkmy_blog||[]).push([[518],{4369:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"ai-pr-descriptions-in-azure-devops","metadata":{"permalink":"/ai-pr-descriptions-in-azure-devops","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2024-10-16/index.md","source":"@site/blog/2024-10-16/index.md","title":"AI Pull Request Descriptions in Azure DevOps","description":"In this post, we\u2019ll explore how to replicate GitHub Copilot\u2019s pull request (PR) description functionality within Azure DevOps, using a custom solution I\u2019ve called DescriptoBot. The goal is to automate the creation of PR descriptions by leveraging Azure OpenAI models, providing a streamlined, AI-driven method to summarize changes and improve efficiency across teams.","date":"2024-10-16T00:00:00.000Z","tags":[{"inline":true,"label":"ai","permalink":"/tags/ai"},{"inline":true,"label":"azure-devops","permalink":"/tags/azure-devops"},{"inline":true,"label":"openai","permalink":"/tags/openai"}],"readingTime":2.645,"hasTruncateMarker":true,"authors":[{"name":"Chris O\'Malley","title":"Senior DevOps Engineer","page":{"permalink":"/authors/chris-omalley/"},"socials":{"linkedin":"https://www.linkedin.com/in/thecomalley/","github":"https://github.com/thecomalley"},"imageURL":"https://avatars.githubusercontent.com/u/31399219?v=4","key":"chris"}],"frontMatter":{"slug":"ai-pr-descriptions-in-azure-devops","title":"AI Pull Request Descriptions in Azure DevOps","authors":["chris"],"tags":["ai","azure-devops","openai"]},"unlisted":false,"nextItem":{"title":"Working with multiple git email addresses","permalink":"/git-configuration"}},"content":"In this post, we\u2019ll explore how to replicate [GitHub Copilot\u2019s pull request (PR) description functionality](https://docs.github.com/en/enterprise-cloud@latest/copilot/using-github-copilot/creating-a-pull-request-summary-with-github-copilot) within Azure DevOps, using a custom solution I\u2019ve called DescriptoBot. The goal is to automate the creation of PR descriptions by leveraging Azure OpenAI models, providing a streamlined, AI-driven method to summarize changes and improve efficiency across teams.\\n\\n\x3c!-- truncate --\x3e\\n\\n### The Problem: Manual PR Descriptions\\n\\nWriting clear and concise PR descriptions can be a time-consuming task. Developers often need to summarize changes made in a feature branch, highlight key modifications, and provide context, which can easily be overlooked in fast-paced environments. While GitHub Copilot provides a useful feature for generating PR descriptions automatically, Azure DevOps lacks this native functionality.\\n\\nTo solve this, I built DescriptoBot, a simple python script that can be manually triggered by a developer when creating a PR in Azure DevOps. The script works by...\\n\\n- Fetching the diff between the source and target branches.\\n- Passing the diff summary and full diff to OpenAI to generate a meaningful PR description.\\n- Suggesting a PR title based on the changes.\\n- Calculating the cost of the OpenAI prompt and output tokens.\\n- Automatically updating the PR description in Azure DevOps.\\n\\n## Example Output\\n\\n![DescriptoBot Example](./descriptobot-example.png)\\n\\n## Core Python Code\\n\\nLet\'s break down some of the key components of the DescriptoBot script.\\n\\n### Fetching the Git Diff\\nHere we simply use the `git diff` command to get the difference between the source and target branches, both in summary and full form.\\nThis provides the context for the OpenAI model to generate a meaningful PR description. \\n```python\\ndef get_diff(source_branch, target_branch):\\n  \\"\\"\\"\\n  Get the diff between the source and target branches.\\n\\n  Parameters:\\n  source_branch (str): The name of the source branch.\\n  target_branch (str): The name of the target branch.\\n\\n  Returns:\\n  tuple: The diff summary and the full diff.\\n\\n  Raises:\\n  Exception: If there was an error getting the diff.\\n  \\"\\"\\"\\n  logging.info(f\\"Getting diff between {source_branch} and {target_branch}\\")\\n  try:\\n    diff_summary = subprocess.check_output([\\"git\\", \\"diff\\", \\"--compact-summary\\", target_branch, source_branch]).decode(\\"utf-8\\")\\n    diff = subprocess.check_output([\\"git\\", \\"diff\\", target_branch, source_branch]).decode(\\"utf-8\\")\\n  except Exception as e:\\n    logging.error(f\\"Failed to get diff: {e}\\")\\n    raise\\n  else:\\n    return diff_summary, diff\\n```\\n\\n## Tokenizing the Diff\\nUsing the tiktoken library, we encode the diff into tokens, which helps us calculate the cost of using the OpenAI model based on the number of tokens.\\n\\n```python\\nimport tiktoken\\n\\nenc = tiktoken.encoding_for_model(model[\'name\'])\\ntokens = enc.encode(diff)\\ndiff_cost = len(tokens) * model[\\"input_cost\\"]\\nprint(f\\"Git diff tokens: {len(tokens)}, Cost: ${diff_cost:.2f}\\")\\n```\\n\\n## OpenAI \\n\\n```python\\nclient = AzureOpenAI(\\n  azure_endpoint=os.getenv(\\"AZURE_OPENAI_ENDPOINT\\"),\\n  api_key=os.getenv(\\"AZURE_OPENAI_API_KEY\\"),\\n  api_version=\\"2024-02-01\\"\\n)\\n\\nsystem_message = f\\"\\"\\"\\nYou are a bot that will help create an Azure DevOps Pull Request description based on a git diff summary and full diff.\\nInclude a Summary and Key Changes section only\\nSuggest a PR title based on the changes using an gitmoji prefix this should be the first line of the PR description, don\'t prefix with # or ##.\\nThere is a character limit of 4000 characters for the PR description so keep it below that.\\n\\"\\"\\"\\n\\nresponse = client.chat.completions.create(\\n    model=\\"gpt-4o\\", # model = \\"deployment_name\\".\\n    messages=[\\n        {\\"role\\": \\"system\\", \\"content\\": system_message},\\n        {\\"role\\": \\"user\\", \\"content\\": \\"Create a Pull Request description based on the git diff.\\"},\\n        {\\"role\\": \\"user\\", \\"content\\": diff_summary},\\n        {\\"role\\": \\"user\\", \\"content\\": diff}\\n    ]\\n)\\n```"},{"id":"git-configuration","metadata":{"permalink":"/git-configuration","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2024-05-27.md","source":"@site/blog/2024-05-27.md","title":"Working with multiple git email addresses","description":"In this post, we\u2019ll explore how to configure Git to use different usernames based on the directory you\u2019re working in. This can be useful when working on multiple projects with different email addresses associated with each one. eg personal projects, work projects, client projects, etc.","date":"2024-05-27T00:00:00.000Z","tags":[{"inline":true,"label":"git","permalink":"/tags/git"}],"readingTime":1.49,"hasTruncateMarker":true,"authors":[{"name":"Chris O\'Malley","title":"Senior DevOps Engineer","page":{"permalink":"/authors/chris-omalley/"},"socials":{"linkedin":"https://www.linkedin.com/in/thecomalley/","github":"https://github.com/thecomalley"},"imageURL":"https://avatars.githubusercontent.com/u/31399219?v=4","key":"chris"}],"frontMatter":{"slug":"git-configuration","title":"Working with multiple git email addresses","authors":["chris"],"tags":["git"]},"unlisted":false,"prevItem":{"title":"AI Pull Request Descriptions in Azure DevOps","permalink":"/ai-pr-descriptions-in-azure-devops"}},"content":"In this post, we\u2019ll explore how to configure Git to use different usernames based on the directory you\u2019re working in. This can be useful when working on multiple projects with different email addresses associated with each one. eg personal projects, work projects, client projects, etc.\\n\\n\x3c!-- truncate --\x3e\\n\\nLets assume a folder structure like this:\\n\\n```bash\\n~/code/\\n\u251c\u2500\u2500 personal/\\n\u2502   \u2514\u2500\u2500 project1/\\n\u2502   \u2514\u2500\u2500 project2/\\n\u251c\u2500\u2500 company/\\n\u2502   \u2514\u2500\u2500 project1/\\n\u2502   \u2514\u2500\u2500 project2/\\n\u251c\u2500\u2500 client1/\\n\u2502   \u2514\u2500\u2500 project1/\\n\u2502   \u2514\u2500\u2500 project2/\\n\u251c\u2500\u2500 client2/\\n\u2502   \u2514\u2500\u2500 project1/\\n\u2502   \u2514\u2500\u2500 project2/\\n```\\n\\nThe `.gitconfig` is where we can configure git git `username` and `email` settings. However this file is either in each repository or in the global git configuration.\\n\\nIdeally we would like to have a different email address for each of the directories in the `~/code/` folder.\\n\\nHowever there is a way to achieve this using the `includeIf` directive in the global `.gitconfig` file.\\n\\n```bash\\n[includeIf \\"gitdir:~/code/personal/\\"]\\n    path = .gitconfig-personal\\n[includeIf \\"gitdir:~/code/work/\\"]\\n    path = .gitconfig-work\\n[includeIf \\"gitdir:~/code/client1/\\"]\\n    path = .gitconfig-client1\\n[includeIf \\"gitdir:~/code/client2/\\"]\\n    path = .gitconfig-client2\\n```\\n\\nIn this configuration, you would have four separate `.gitconfig` files: \\n- `~/code/personal/.gitconfig-personal`, \\n- `~/code/work/.gitconfig-work`, \\n- `~/code/client1/.gitconfig-client1`,  \\n- `~/code/client2/.gitconfig-client2.` \\n\\nEach of these files would contain the user email configuration for the respective directory.\\nFor example, the `.gitconfig-personal` file might look like this:\\n\\n```bash\\n[user]\\n    email = personal-email@domain.com\\n```\\n\\nTo validate that your configuration is working as expected, you can use the `git config user.email` command in the terminal while inside the repository directory. This command will display the email address that Git is currently configured to use for that repository. If the output matches the email address you specified in the .gitconfig file for that directory, then you\'ve successfully configured Git to use different author email addresses based on the repository location.\\n\\nHappy coding!"}]}}')}}]);