<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Chris O'Malley</title><link>https://thecomalley.github.io/</link><description>Recent content on Chris O'Malley</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 16 Oct 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://thecomalley.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Automating Pull Request Descriptions in Azure DevOps</title><link>https://thecomalley.github.io/posts/descriptobot/</link><pubDate>Wed, 16 Oct 2024 00:00:00 +0000</pubDate><guid>https://thecomalley.github.io/posts/descriptobot/</guid><description>&lt;p>In this post, we’ll explore how to replicate &lt;a href="https://docs.github.com/en/enterprise-cloud@latest/copilot/using-github-copilot/creating-a-pull-request-summary-with-github-copilot" target="_blank" rel="noopener">GitHub Copilot’s pull request (PR) description functionality&lt;/a> within Azure DevOps, using a custom solution I’ve called DescriptoBot. The goal is to automate the creation of PR descriptions by leveraging Azure OpenAI models, providing a streamlined, AI-driven method to summarize changes and improve efficiency across teams.&lt;/p>
&lt;h3 id="the-problem-manual-pr-descriptions">The Problem: Manual PR Descriptions&lt;/h3>
&lt;p>Writing clear and concise PR descriptions can be a time-consuming task. Developers often need to summarize changes made in a feature branch, highlight key modifications, and provide context, which can easily be overlooked in fast-paced environments. While GitHub Copilot provides a useful feature for generating PR descriptions automatically, Azure DevOps lacks this native functionality.&lt;/p></description></item><item><title>Configuring Git to Use Different Author Email Addresses Based on Repository Location</title><link>https://thecomalley.github.io/posts/git-emails/</link><pubDate>Mon, 27 May 2024 00:00:00 +0000</pubDate><guid>https://thecomalley.github.io/posts/git-emails/</guid><description>&lt;p>Greetings! This post will guide you on how to configure Git to use different author email addresses based on where you clone the repository in your local directory. This can be particularly useful if you have different email addresses for personal projects, work, and different clients.&lt;/p>
&lt;p>Here&amp;rsquo;s an example of how you might organize your directories:&lt;/p>
&lt;ul>
&lt;li>&lt;code>code/personal&lt;/code>: For personal projects, you might want to use your personal email address.&lt;/li>
&lt;li>&lt;code>code/work&lt;/code>: For your job, you might want to use your work email address.&lt;/li>
&lt;li>&lt;code>code/client1&lt;/code>: For your first client, you might want to use a specific client email address.&lt;/li>
&lt;li>&lt;code>code/client2&lt;/code>: For your second client, you might want to use a different client email address.&lt;/li>
&lt;/ul>
&lt;p>To achieve this, you can use the &lt;code>includeIf&lt;/code> directive in your global &lt;code>~/.gitconfig&lt;/code> file:&lt;/p></description></item><item><title>Ansible</title><link>https://thecomalley.github.io/posts/ansible/</link><pubDate>Wed, 13 Oct 2021 00:00:00 +0000</pubDate><guid>https://thecomalley.github.io/posts/ansible/</guid><description>&lt;h1 id="terraform-azure-ansible--windows">Terraform, Azure, Ansible &amp;amp; Windows&lt;/h1>
&lt;p>Config management has been something on the back of my mind to dive into but have never quite got around to it, so its about time to have a look at ansible!
The is to to provision &amp;amp; configure a Windows VM without having to touch a GUI&lt;/p>
&lt;h2 id="1-deploy-the-vm">1. Deploy the VM&lt;/h2>
&lt;p>Firstly we need to deploy a VM to Azure, for this i&amp;rsquo;m just using the example code provided with the &lt;a href="https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/windows_virtual_machine" target="_blank" rel="noopener">azurerm_windows_virtual_machine&lt;/a> with the addition of a Public IP to manage remotely,&lt;/p></description></item><item><title>Monitoring Electricity usage to save $$ - Part 1</title><link>https://thecomalley.github.io/posts/electrickiwi/part1/</link><pubDate>Wed, 13 Oct 2021 00:00:00 +0000</pubDate><guid>https://thecomalley.github.io/posts/electrickiwi/part1/</guid><description>&lt;p>The electricity provider i&amp;rsquo;m with offers a changeable free &amp;ldquo;Hour Of Power&amp;rdquo; every day (off peak hours) So we set about making the most of this in our household, running the dishwasher washing machine and hot water all during this hour. But after a while we fell out of the habit, adjusting our lifestyle to fit this hour wasn&amp;rsquo;t really working&amp;hellip; Luckily the Electricity provider does provide the ability to change the Hour of Power for the current day (up to 11:59pm each day)&lt;/p></description></item><item><title>Monitoring cron jobs with healthchecks.io</title><link>https://thecomalley.github.io/posts/cron/</link><pubDate>Wed, 30 Jun 2021 00:00:00 +0000</pubDate><guid>https://thecomalley.github.io/posts/cron/</guid><description>&lt;p>This is a quick and simple post about using monitoring a cron job with &lt;a href="https://healthchecks.io/" target="_blank" rel="noopener">healthchecks.io&lt;/a>
in this case the script is a rsync job from an local server (unRAID) to azure blob but principles are pretty universal.
you can checkout the code for this on github &lt;a href="https://github.com/thecomalley/homelab-remote-backup" target="_blank" rel="noopener">homelab-remote-backup&lt;/a>&lt;/p>
&lt;p>healthchecks.io provides &amp;ldquo;Simple and Effective Cron Job Monitoring&amp;rdquo; via hitting a http url, it can be used as a SaaS tool and is also open-source so you can &lt;a href="https://healthchecks.io/docs/self_hosted/" target="_blank" rel="noopener">self host it&lt;/a>&lt;/p></description></item></channel></rss>